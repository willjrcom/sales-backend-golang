version: '3.8'

name: sales-backend-go

services:
  goapp:
    build: .
    volumes:
      - .:/go/app
    platform: linux/amd64
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    ports:
      - "8080:8080"
    depends_on:
      - database
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=sales-db

  database:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=sales-db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

    # networks:
    #   - sonarnet

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.6.1
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"

  # kafka:
  #   image: confluentinc/cp-server:7.6.1
  #   hostname: kafka
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "9094:9094"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,OUTSIDE://host.docker.internal:9094
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     CONFLUENT_METRICS_ENABLE: 'false'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  #   # restart: always

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:latest
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:latest
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - kafka
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
  #     SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
  #     SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
  #   ports:
  #     - "8081:8081"
      
  # sonarqube:
  #   image: sonarqube:latest
  #   container_name: sonarqube
  #   networks:
  #     - sonarnet
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     - SONAR_JDBC_USERNAME=admin
  #     - SONAR_JDBC_PASSWORD=admin
  #     - SONAR_JDBC_URL=jdbc:postgresql://database:5432/sales-db?currentSchema=sonarqube
  #   volumes:
  #     - sonarqube_data:/opt/sonarqube/data
  #     - sonarqube_logs:/opt/sonarqube/logs
  #     - sonarqube_extensions:/opt/sonarqube/extensions
  #   depends_on:
  #     - database

  # sonar-scanner:
  #   image: sonarsource/sonar-scanner-cli
  #   container_name: sonar-scanner
  #   platform: linux/amd64
  #   environment:
  #     - SONAR_HOST_URL=http://sonarqube:9000
  #     - SONAR_TOKEN=sqp_7751e0b39a2118796d05333b92d99fbf8ba840ca
  #     - SONAR_PROJECTKEY=sales-db
  #   networks: 
  #     - sonarnet
  #   depends_on:
  #     - sonarqube
  #   volumes:
  #     - "./src:/usr/src"
  #   entrypoint: >
  #     bash -c "
  #     sonar-scanner \
  #       -Dsonar.projectKey=sales-db \
  #       -Dsonar.sources=. \
  #       -Dsonar.host.url=http://localhost:9000 \
  #       -Dsonar.token=sqp_7751e0b39a2118796d05333b92d99fbf8ba840ca
  #     "


# networks:
#   sonarnet:
#     driver: bridge

volumes:
  db_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

# Subir container
# docker-compose -f docker-compose.dev.yml up -d